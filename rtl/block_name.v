// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files from any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Altera Program License
// Subscription Agreement, Altera MegaCore Function License
// Agreement, or other applicable license agreement, including,
// without limitation, that your use is for the sole purpose of
// programming logic devices manufactured by Altera and sold by
// Altera or its authorized distributors.  Please refer to the
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 13.1 (Build Build 162 10/23/2013)
// Created on Fri Apr 07 13:50:41 2023

//  Module Declaration
module block_name
(
// {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!

// {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
);
// Port Declaration

// {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
// {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!



endmodule

module pi_controller (
  input clk,
  input reset_n,
  input signed [15:0] error,
  output signed [15:0] control
);

  reg signed [31:0] sum = 0;
  reg signed [15:0] Kp = 10;
  reg signed [15:0] Ki = 5;
  reg signed [15:0] integral = 0;

  always @(posedge clk or negedge reset_n) begin
    if (~reset_n) begin
      sum <= 0;
      integral <= 0;
    end else begin
      integral <= integral + error;
      sum <= (Kp * error) + (Ki * integral);
    end
  end

  assign control = sum[15:0];

endmodule
